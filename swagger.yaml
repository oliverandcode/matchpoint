openapi: 3.0.0
info:
  description: |
    This is a location-based, match-based dating app.
    It is intended to rectify the problem of "missed
    connections." The location services allow for
    immediacy, chemistry, and ease of in-person
    bonds. The matches make sure that each connection
    is reciprocal.
  version: "1.0.0"
  title: MatchPoint
  termsOfService: 'http://swagger.io/terms/'
  contact:
    email: oliverandcode@github.io
  license:
    name: Apache 2.0
    url: 'http://www.apache.org/licenses/LICENSE-2.0.html'
servers:
  # Added by API Auto Mocking Plugin
  - description: SwaggerHub API Auto Mocking
    url: https://virtserver.swaggerhub.com/OliverAyers/LocationDatingApp/1.0.0
  - url: 'https://petstore.swagger.io/v2'
tags:
  - name: User
    description: A MatchPoint user, with all the relevant metadata, including current location.
    externalDocs:
      description: Find out more
      url: 'http://swagger.io'
  - name: match
    description: Relationships between users. Includes which user initiated contact, and the response from the second user. 
  - name: chat
    description: User-to-user chats. 
    externalDocs:
      description: Find out more
      url: 'http://swagger.io'
paths:
  /user:
    post:
      tags:
        - user
      summary: Create a new user account
      description: This can only be done by the logged in user.
      operationId: createNewUser
      responses:
        default:
          description: successful operation
        '405':
          description: Invalid input
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/User'
        description: Created user object
        required: true
    put: # change to a PATCH?
      tags:
        - user
      summary: Update an existing user
      operationId: updateUser
      responses:
        '400':
          description: Invalid ID supplied
        '404':
          description: User not found
        '405':
          description: Validation exception
      requestBody:
        $ref: '#/components/requestBodies/User'
  /user/login:
    get:
      tags:
        - user
      summary: Logs user into the system
      operationId: loginUser
      parameters:
        - email: user_email
          in: query
          description: the email address for login
          required: true
          schema:
            type: email
        - name: password
          in: query
          description: The password for login in clear text
          required: true
          schema:
            type: string
      responses:
        '200':
          description: successful operation
          headers:
            X-Rate-Limit:
              description: calls per hour allowed by the user
              schema:
                type: integer
                format: int32
            X-Expires-After:
              description: date in UTC when token expires
              schema:
                type: string
                format: date-time
          content:
            application/json:
              schema:
                type: string
            application/xml:
              schema:
                type: string
        '400':
          description: Invalid username/password supplied
  /user/logout:
    get:
      tags:
        - user
      summary: Logs out current logged in user session
      operationId: logoutUser
      responses:
        default:
          description: Successful operation
  /user/{userId}:
    get:
      tags:
        - user
      summary: Find user by ID
      description: Returns a single user
      operationId: getUserById
      parameters:
        - name: userId
          in: path
          description: ID of user to return
          required: true
          schema:
            type: string
            format: uuid
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
            application/xml:
              schema:
                $ref: '#/components/schemas/User'
        '400':
          description: Invalid ID supplied
        '404':
          description: User not found
      security:
        - api_key: []
    put:
      tags:
        - user
      summary: Updates a user in the database
      description: This can only be done by the logged in user.
      operationId: updateUser
      parameters:
        - name: userId
          in: path
          description: ID of user that needs to be updated
          required: true
          schema:
            type: string
            format: uuid
      responses:
        '405':
          description: Invalid input
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/User'
        description: Updated user object
        required: true
    delete:
      tags:
        - user
      summary: Deletes a user
      description: This can only be done by the logged in user.
      operationId: deleteUser
      parameters:
        - name: api_key
          in: header
          required: false
          schema:
            type: string
        - name: userId
          in: path
          description: User id to delete
          required: true
          schema:
            type: string
            format: uuid
      responses:
        '400':
          description: Invalid ID supplied
        '404':
          description: User not found
  /user/{userId}/uploadImage:
    post:
      tags:
        - user
      summary: uploads an image to a user's album
      operationId: uploadFile
      parameters:
        - name: userId
          in: path
          description: ID of user to update
          required: true
          schema:
            type: string
            format: uuid
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiResponse'
      requestBody:
        content:
          application/octet-stream:
            schema:
              type: string
              format: binary
    delete:
      tags:
        - user
      summary: Delete user
      description: This can only be done by the logged in user.
      operationId: deleteUser
      parameters:
        - name: username
          in: path
          description: The name that needs to be deleted
          required: true
          schema:
            type: string
      responses:
        '400':
          description: Invalid username supplied
        '404':
          description: User not found
externalDocs:
  description: Find out more about Swagger
  url: 'http://swagger.io'
components:
  schemas:
    User:
      type: object
      properties:
        id:
          type: string
          format: uuid
        email:
          type: string
        password:
          type: string
        displayName:
          type: string
        displayPic: # how to format?
          type: string
          # format: base64
        currentLocation: # how to format?
          type: string
          # format: int32
          description: User's current location
      xml:
        name: User
    Match:
      type: object
      required:
        - initiating_user
        - responding_user
      properties:
        initiating_user:
          $ref: '#/components/schemas/User'
        responding_user:
          $ref: '#/components/schemas/User'
        response:
          type: boolean
    Message:
      type: object
      properties:
        messageTimestamp:
          type: string
          format: date-time
        text:
          type: string
          description: the text content of the message # may update to rtf later
        sender:
          $ref: '#/components/schemas/User'
        chatId:
          type: string
          format: uuid
          description: the ID of the chat this message belongs to
    Chat:
      type: object
      required:
        - match
      properties:
        id:
          type: string
          format: uuid
        match:
          $ref: '#/components/schemas/Match'
        content:
          type: object
          properties:
    ApiResponse:
      type: object
      properties:
        code:
          type: integer
          format: int32
        type:
          type: string
        message:
          type: string
  requestBodies:
    User:
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/User'
        application/xml:
          schema:
            $ref: '#/components/schemas/User'
        description: User object that needs to be added to the database
        required: true
  securitySchemes:
    chat_auth:
      type: oauth2
      flows:
        implicit:
          authorizationUrl: 'http://matchpoint.swagger.io/oauth/dialog'
          scopes: # the scopes need to be better defined
            'write:chats': edit messages in your chat history
            # can only edit chats within a certain time frame (5 min?) 
            # and only if you have read access to that chat history
            'read:chats': read your chat history
            # can only read chats if no one has revoked their match or blocked the other person
    api_key:
      type: apiKey
      name: api_key
      in: header